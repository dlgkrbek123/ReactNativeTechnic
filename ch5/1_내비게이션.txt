-------------------------------------------------------

- 앱은 여러개의 화면으로 구성된다.
- 이런 앱을 구성하려면 내비게이션 관련 라이브러리를 사용

-------------------------------------------------------

npx react-native init Navigation
npm install @react-navigation/native
npm install react-native-screens react-native-safe-area-context

-------------------------------------------------------
 라이브러리를 적용하기 위해서는 앱전체를 컴포넌트로 감싸야 함

import React from 'react'
import { NavigationContainer } from '@react-navigation/native'

const App = () => {
  return <NavigationContainer></NavigationContainer>
}

-------------------------------------------------------

- 웹페이지는 anchor 태그를 통해서 페이지를 이동하는데
  스택으로 구현된 내장 히스토리가 이를 가능케 한다.

- 리액트 네이티브에서는 화면전환에서 브라우저와 비슷한 
  사용성을 제공하기 위해 네이티브 스택 네이게이터를 사용

-------------------------------------------------------

- 네이티브 스택 내비게이터 
 가장 흔히 사용되는 내비게이터
 일반 네이티브앱과 동일한 방식으로 화면 관리

npm install @react-navigation/native-stack

- 아래와 같은 JSX를 사용해서 라우트를 설정

<NavigationContainer>
  <Stack.Navigator initialRouteName="Home">
    <Stack.Screen name="Home" component={HomeScreen} />
    <Stack.Screen name="Detail" component={DetailScreen} />
  </Stack.Navigator>
</NavigationContainer>


- 스크린으로 사용된 컴포넌트는 navigation을 props로 받음
  아래와 같이 라우트를 전환 
- navigate는 화면명이 같으면 푸쉬하지 않고 파라미터만 수정
- push는 무적권 히스토리를 푸쉬한다.

navigation.navigate("Detail")
navigation.push("Detail")


- 새 화면을 보여줄 때 의존해야 하는 인자는 라우트 파라미터로 설정
  객체로 지정한다.

  navigation.navigate("Detail", { id: 1 }) 
  navigation.push("Detail" ,{ id: 2 })

- 아래의 두 함수를 호출해 뒤로가기를 수행한다.

navigation.pop()
navigation.popToTop()


- 열린 스크린에서는 route props에서 값에 접근가능하다.

  key : 새로운 화면이 나타날 때 자동으로 생성되는 id 값
  name: 라우트에 설정한 화면이름
  params: 화면에 지정한 파라미터

-------------------------------------------------------