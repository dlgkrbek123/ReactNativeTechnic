-------------------------------------------------------

불변성

- 리액트에서 객체나 배열 타입의 상태를 수정할때는 불변성을 지켜야함
  객체와 배열을 직접 수정하지 않고 수정 필요시 새로운 객체를 만들어 전달

-------------------------------------------------------

왜 지켜야 함?

- 렌더링 최적화를 위해서
- 부모컴포넌트가 리렌더링되면 기본적으로 자식 컴포넌트도 리렌더링
- 화면이 복잡해지면 리렌더링 최적화를 튜닝해야 하는데 각 컴포넌트의
  리렌더링 필요성을 판단하기 위해서는 Props를 확인해야함
  
- 객체와 배열 타입의 props를 비교한다고 할 때 모든 key, element의
  값을 일일히 검사하기는 어려움 대신 객체와 배열의 레퍼런스가 같은지로 확인

-------------------------------------------------------

배열 불변성 지키기

// 불변성 안지키고 수정하기
const numbers = [0, 1, 2, 3]
numbers.push(4)
numbers[0] = 10
nunmber.splice(0, 1)


// 불변성 지키며 요소 추가하기
const numbers = [0, 1, 2, 3]
const nextNumbers = [...numbers, 4]
const nextNumbers = numbers.concat([4, 5, 6])


// 불변성 지키고 제거하기
const numbers = [-3, -2, -1, 0, 1, 2, 3]
const filtered = numbers.filter(number => number > 0)
const filtered = numbers.filter((number, idx) => idx !== 3) // 4번째 요소만 제거


// 객체로 이루어진 배열 다루기
const items = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }]
const nextItems = items.filter((item) => item.id !== 3)
const index = items.findindex((item) => item.id === 3)
const nextItems = [...items].splice(index, 1)


// 요소 수정하기

const numbers = [-3, -2, -1, 0, 1, 2, 3]
const nextNumbers = numbers.map((number) => number === 0 ? 10: number)
const nextNumbers = numbers.map((number, idx) => idx === 3 ? 10: number)

const items = [
  { id: 1, text: "안녕하세요" },
  { id: 2, text: "환영합니다" },
  { id: 3, text: "반갑습니다" }, 
]
const nextItems = items.map((item) => item.id === 2 ? {...item, text: "안녕히 계세요"} : item )

-------------------------------------------------------