-------------------------------------------------------

Context API

- 리액트에 내장된 기능으로 props로 다중 계층을 따라 데이터를 props로
  일일히 내려주지 않고 값을 공유할 수 있게 해준다.

- 주로 전역상태를 관리할 때 사용

-------------------------------------------------------

import { createContext } from "react"

const LogContext = createContext("안녕하세요")
// 콘텍스트 생성
// 생성시 Provider와 Consumer 컴포넌트가 리턴된다.

-------------------------------------------------------

- Provider는 값을 사용하는 컴포넌트를 감싼다
- 내부에 선언된 모든 컴포넌트에서 Context의 값을 사용가능
- value Props로 공유될 값을 설정한다.


<LogContext.Provider value="엄준식">
  {children}
</LogContext.Provider>

-------------------------------------------------------

- Consumer컴포넌트를 사용하여 Provider에서 설정한 값에 접근가능하다.
- 컴포넌트 태그사이에 함수를 넣었는데 이를 render props패턴이라고 한다.


<LogContext.Consumer>
  {(value) => <Text>{value}</Text>}
</LogContext.Consumer>


- Consumer의 경우는 useContext hooks로 대체됨
  훨씬 코드가 간결해짐

const value = useContext(LogContext)

-------------------------------------------------------

children props

- 컴포넌트 태그사이에 넣어준 값을 의미하는 props

const Box = ({ children }) => {
  return <View>{children}</View>
}

const Example = () => {
  return (
    <Box>
      <Text>1</Text>
    </Box>
  ) 
}

- 위의 예제의 경우 <Text>1</Text>을 나타내는 JSX가 Box의 
  children props에 해당한다.

-------------------------------------------------------

render props

- children의 타입을 함수로 받아오는 패턴
  hooks이전에 유행한 패턴

- render props를 받은 자식 컴포넌트에서 이를 호출하여 
  상위 컴포넌트에서 값을 사용 가능

-------------------------------------------------------