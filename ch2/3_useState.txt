-------------------------------------------------------

useState

- 동적인 화면을 구현하려면 상태를 관리해야 한다
- 상태를 관리하는 가장 기본적인 방법


const [visible, setVisible] = useState(true)

- 상태값과 상태값을 바꾸는 함수가 배열로서 리턴되므로
  배열 구조 분해 할당을 사용하여 얻어옴

-------------------------------------------------------

Hook의 규칙

1. Hook은 컴포넌트의 최상위 레벨에서만 사용되어야함
   (조건문. 반복문등에서 사용되면 안됨)
2. 기본 훅들을 이용하여 커스텀 훅을 구현가능하다.
3. hook은 커스텀훅 or 함수형 컴포넌트에서만 사용가능

-------------------------------------------------------

- App.js를 아래와 같이 작성하여 state를 통해 동적인 인터랙션을 구현

const App = () => {
  const [visible, setVisible] = useState(true);

  const onButtonPress = () => setVisible(prev => !prev);

  return (
    <SafeAreaView>
      <Button title="토글" onPress={onButtonPress} />
      {visible && <Box rounded size="large" color="tomato" />}
    </SafeAreaView>
  );
};